{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nconst useCarousel = _ref => {\n  _s();\n  let {\n    rootRef,\n    defaultVisibleIndex = 0\n  } = _ref;\n  const [carouselItems, setCarouselItems] = React.useState([]);\n  const [visibleIndexes, setVisible] = React.useState(new Set([defaultVisibleIndex]));\n  const scrollToIndex = index => {\n    var _carouselItems$index;\n    const pos = 'nearest';\n    (_carouselItems$index = carouselItems[index]) === null || _carouselItems$index === void 0 ? void 0 : _carouselItems$index.scrollIntoView({\n      behavior: 'smooth',\n      block: pos,\n      inline: pos\n    });\n  };\n  useEffect(() => {\n    if (rootRef.current) {\n      const C = Array.from(rootRef.current.children);\n      setCarouselItems(C);\n      const options = {\n        root: rootRef.current,\n        threshold: 1.0\n      };\n      const observer = new IntersectionObserver(e => {\n        e.forEach(entry => {\n          if (entry.intersectionRatio === 1) {\n            visibleIndexes.add(C.indexOf(entry.target));\n          } else {\n            visibleIndexes.delete(C.indexOf(entry.target));\n          }\n        });\n        const newSet = new Set(visibleIndexes.values());\n        if (newSet.size > 0) setVisible(newSet);\n      }, options);\n      C.forEach(target => {\n        observer.observe(target);\n      });\n      scrollToIndex(defaultVisibleIndex);\n    }\n  }, [rootRef.current]);\n  const sortedArray = Array.from(visibleIndexes.values()).sort();\n  return {\n    visibleIndexes: sortedArray,\n    scrollToIndex\n  };\n};\n_s(useCarousel, \"qO/HQDgvpSjrFuvgv1CbKpHi854=\");\nexport { useCarousel };","map":{"version":3,"names":["React","useEffect","useCarousel","_ref","_s","rootRef","defaultVisibleIndex","carouselItems","setCarouselItems","useState","visibleIndexes","setVisible","Set","scrollToIndex","index","_carouselItems$index","pos","scrollIntoView","behavior","block","inline","current","C","Array","from","children","options","root","threshold","observer","IntersectionObserver","e","forEach","entry","intersectionRatio","add","indexOf","target","delete","newSet","values","size","observe","sortedArray","sort"],"sources":["/Users/acm1pro/Downloads/sandbox/src/components/carousel/useCarousel.tsx"],"sourcesContent":["import React, { useEffect } from 'react';\n\ninterface UseCarouselProps {\n  rootRef: React.RefObject<HTMLDivElement>;\n  defaultVisibleIndex?: number;\n}\n\nconst useCarousel = ({\n  rootRef,\n  defaultVisibleIndex = 0,\n}: UseCarouselProps): {\n  visibleIndexes: number[];\n  scrollToIndex: (index: number) => void;\n} => {\n  const [carouselItems, setCarouselItems] = React.useState<Element[]>([]);\n  const [visibleIndexes, setVisible] = React.useState(\n    new Set<number>([defaultVisibleIndex]),\n  );\n\n  const scrollToIndex = (index: number) => {\n    const pos = 'nearest';\n    carouselItems[index]?.scrollIntoView({\n      behavior: 'smooth',\n      block: pos,\n      inline: pos,\n    });\n  };\n\n  useEffect(() => {\n    if (rootRef.current) {\n      const C = Array.from(rootRef.current.children);\n      setCarouselItems(C);\n      const options = {\n        root: rootRef.current,\n        threshold: 1.0,\n      };\n\n      const observer = new IntersectionObserver((e) => {\n        e.forEach((entry) => {\n          if (entry.intersectionRatio === 1) {\n            visibleIndexes.add(C.indexOf(entry.target));\n          } else {\n            visibleIndexes.delete(C.indexOf(entry.target));\n          }\n        });\n        const newSet = new Set(visibleIndexes.values());\n        if (newSet.size > 0) setVisible(newSet);\n      }, options);\n\n      C.forEach((target) => {\n        observer.observe(target);\n      });\n\n      scrollToIndex(defaultVisibleIndex);\n    }\n  }, [rootRef.current]);\n\n  const sortedArray = Array.from(visibleIndexes.values()).sort();\n  return {\n    visibleIndexes: sortedArray,\n    scrollToIndex,\n  };\n};\n\nexport { useCarousel };\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AAOxC,MAAMC,WAAW,GAAGC,IAAA,IAMf;EAAAC,EAAA;EAAA,IANgB;IACnBC,OAAO;IACPC,mBAAmB,GAAG;EACN,CAAC,GAAAH,IAAA;EAIjB,MAAM,CAACI,aAAa,EAAEC,gBAAgB,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAY,EAAE,CAAC;EACvE,MAAM,CAACC,cAAc,EAAEC,UAAU,CAAC,GAAGX,KAAK,CAACS,QAAQ,CACjD,IAAIG,GAAG,CAAS,CAACN,mBAAmB,CAAC,CACvC,CAAC;EAED,MAAMO,aAAa,GAAIC,KAAa,IAAK;IAAA,IAAAC,oBAAA;IACvC,MAAMC,GAAG,GAAG,SAAS;IACrB,CAAAD,oBAAA,GAAAR,aAAa,CAACO,KAAK,CAAC,cAAAC,oBAAA,uBAApBA,oBAAA,CAAsBE,cAAc,CAAC;MACnCC,QAAQ,EAAE,QAAQ;MAClBC,KAAK,EAAEH,GAAG;MACVI,MAAM,EAAEJ;IACV,CAAC,CAAC;EACJ,CAAC;EAEDf,SAAS,CAAC,MAAM;IACd,IAAII,OAAO,CAACgB,OAAO,EAAE;MACnB,MAAMC,CAAC,GAAGC,KAAK,CAACC,IAAI,CAACnB,OAAO,CAACgB,OAAO,CAACI,QAAQ,CAAC;MAC9CjB,gBAAgB,CAACc,CAAC,CAAC;MACnB,MAAMI,OAAO,GAAG;QACdC,IAAI,EAAEtB,OAAO,CAACgB,OAAO;QACrBO,SAAS,EAAE;MACb,CAAC;MAED,MAAMC,QAAQ,GAAG,IAAIC,oBAAoB,CAAEC,CAAC,IAAK;QAC/CA,CAAC,CAACC,OAAO,CAAEC,KAAK,IAAK;UACnB,IAAIA,KAAK,CAACC,iBAAiB,KAAK,CAAC,EAAE;YACjCxB,cAAc,CAACyB,GAAG,CAACb,CAAC,CAACc,OAAO,CAACH,KAAK,CAACI,MAAM,CAAC,CAAC;UAC7C,CAAC,MAAM;YACL3B,cAAc,CAAC4B,MAAM,CAAChB,CAAC,CAACc,OAAO,CAACH,KAAK,CAACI,MAAM,CAAC,CAAC;UAChD;QACF,CAAC,CAAC;QACF,MAAME,MAAM,GAAG,IAAI3B,GAAG,CAACF,cAAc,CAAC8B,MAAM,CAAC,CAAC,CAAC;QAC/C,IAAID,MAAM,CAACE,IAAI,GAAG,CAAC,EAAE9B,UAAU,CAAC4B,MAAM,CAAC;MACzC,CAAC,EAAEb,OAAO,CAAC;MAEXJ,CAAC,CAACU,OAAO,CAAEK,MAAM,IAAK;QACpBR,QAAQ,CAACa,OAAO,CAACL,MAAM,CAAC;MAC1B,CAAC,CAAC;MAEFxB,aAAa,CAACP,mBAAmB,CAAC;IACpC;EACF,CAAC,EAAE,CAACD,OAAO,CAACgB,OAAO,CAAC,CAAC;EAErB,MAAMsB,WAAW,GAAGpB,KAAK,CAACC,IAAI,CAACd,cAAc,CAAC8B,MAAM,CAAC,CAAC,CAAC,CAACI,IAAI,CAAC,CAAC;EAC9D,OAAO;IACLlC,cAAc,EAAEiC,WAAW;IAC3B9B;EACF,CAAC;AACH,CAAC;AAACT,EAAA,CAvDIF,WAAW;AAyDjB,SAASA,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}